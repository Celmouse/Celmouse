// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/mouse.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class MouseBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MouseBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MouseBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void move_mouse(
    double a,
    double b,
  ) {
    return _move_mouse(
      a,
      b,
    );
  }

  late final _move_mousePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGFloat, CGFloat)>>(
          'move_mouse');
  late final _move_mouse =
      _move_mousePtr.asFunction<void Function(double, double)>();

  MousePosition get_mouse_position() {
    return _get_mouse_position();
  }

  late final _get_mouse_positionPtr =
      _lookup<ffi.NativeFunction<MousePosition Function()>>(
          'get_mouse_position');
  late final _get_mouse_position =
      _get_mouse_positionPtr.asFunction<MousePosition Function()>();
}

final class MousePosition extends ffi.Struct {
  @CGFloat()
  external double x;

  @CGFloat()
  external double y;
}

typedef CGFloat = ffi.Double;
typedef DartCGFloat = double;
