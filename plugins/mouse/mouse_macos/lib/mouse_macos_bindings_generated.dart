// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/mouse_macos.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class MouseMacosBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MouseMacosBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MouseMacosBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void mouseMove(
    double x,
    double y,
  ) {
    return _mouseMove(
      x,
      y,
    );
  }

  late final _mouseMovePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float, ffi.Float)>>(
          'mouseMove');
  late final _mouseMove =
      _mouseMovePtr.asFunction<void Function(double, double)>();

  void mouseMoveTo(
    double x,
    double y,
  ) {
    return _mouseMoveTo(
      x,
      y,
    );
  }

  late final _mouseMoveToPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float, ffi.Float)>>(
          'mouseMoveTo');
  late final _mouseMoveTo =
      _mouseMoveToPtr.asFunction<void Function(double, double)>();

  ScreenSize getScreenSize() {
    return _getScreenSize();
  }

  late final _getScreenSizePtr =
      _lookup<ffi.NativeFunction<ScreenSize Function()>>('getScreenSize');
  late final _getScreenSize =
      _getScreenSizePtr.asFunction<ScreenSize Function()>();

  void mousePressButton(
    int button,
  ) {
    return _mousePressButton(
      button,
    );
  }

  late final _mousePressButtonPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'mousePressButton');
  late final _mousePressButton =
      _mousePressButtonPtr.asFunction<void Function(int)>();

  void mouseReleaseButton(
    int button,
  ) {
    return _mouseReleaseButton(
      button,
    );
  }

  late final _mouseReleaseButtonPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'mouseReleaseButton');
  late final _mouseReleaseButton =
      _mouseReleaseButtonPtr.asFunction<void Function(int)>();
}

/// Estrutura para armazenar a largura e altura da tela
final class ScreenSize extends ffi.Struct {
  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;
}
